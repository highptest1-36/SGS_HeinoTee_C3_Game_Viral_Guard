# Code Generation Prompts

## HTML Structure

### Prompt 1: Main HTML Structure
```
Generate HTML5 structure for a single-page game with 5 screens:
1. Menu screen - player count selector, difficulty buttons, fact-checker toggle
2. How to Play screen - rules, role explanations, 6 red flags guide
3. Role Assignment screen - dramatic role reveal with icon, color, abilities
4. Play screen - feed grid (4 cards), sidebar (players/log/instructions), dual meters header, action modal
5. Results screen - win/lose banner, scoreboard, final stats, learning section

Use semantic HTML, data attributes for JS hooks, modal overlays for actions/events.
```

### Prompt 2: Feed Card Component
```
Create HTML template for social media-style card:
- Header: Topic tag, virality score (üî• icon)
- Title: Bold, attention-grabbing
- Optional flag indicator (üö©)
- Optional reveal section (credibility score, explanation)
- States: Normal, selected (border glow), flagged (red tint), checked (blue tint)
```

## CSS Styling

### Prompt 3: Feed Layout Styling
```
Write CSS for Instagram/Facebook-style feed:
- CSS Grid with 2 columns on desktop, 1 on mobile
- Card hover effects (scale 1.02, box-shadow)
- Smooth transitions (0.3s ease)
- Role color theming via CSS variables
- Responsive breakpoints (768px, 480px)
```

### Prompt 4: Meter Animations
```
Create animated meter bars:
- Viral Meter: Orange to red gradient (#f59e0b ‚Üí #ef4444)
- Trust Meter: Green gradient (#10b981 ‚Üí #34d399)
- Width transition on update (0.5s cubic-bezier)
- Threshold marker line
- Pulse effect when near threshold
```

### Prompt 5: Modal Overlays
```
Style modal system:
- Backdrop blur (backdrop-filter: blur(5px))
- Modal slide-in animation (translateY(-20px) ‚Üí 0)
- Action buttons with role colors
- Close X button (top-right)
- Z-index layering (backdrop: 1000, modal: 1001)
```

## JavaScript - Data Structures

### Prompt 6: Cards Data Structure
```javascript
// Generate 25 card objects with this schema:
const cardTemplate = {
    id: "c001",
    title: "Headline in Vietnamese",
    topic: "s·ª©c kh·ªèe | m√¥i tr∆∞·ªùng | c√¥ng ngh·ªá | x√£ h·ªôi",
    credibility: 0-100, // 0=false, 50=misleading, 70+=true
    type: "false | misleading | true | satire",
    baseVirality: 1-3,
    signals: ["gi·∫≠t t√≠t", "thi·∫øu ngu·ªìn", "k√≠ch ƒë·ªông", "l·ªói th·ªùi", "s·ªë li·ªáu nghi ng·ªù", "h√¨nh ·∫£nh kh√¥ng kh·ªõp"],
    reveal: "Educational explanation of why true/false",
    actionHint: "What players should do",
    sourceHint: "How to verify (Google, VAFC, WHO, etc.)"
};
```

### Prompt 7: Event Cards Data
```javascript
// Generate 10 event objects:
const eventTemplate = {
    id: "ev001",
    name: "B√£o tin ƒë·ªìn",
    icon: "üå™Ô∏è",
    description: "M·ªôt tin ƒë·ªìn lan truy·ªÅn nhanh",
    effect: "viral | trust | mixed | disable_check | none",
    modifier: +1 | -1 | {conditional},
    targetType: "all | unchecked | false | random | conditional",
    message: "Display message for UI"
};
```

### Prompt 8: Roles Configuration
```javascript
// Define 3 roles with asymmetric abilities:
const rolesConfig = {
    moderator: {
        name: "G√°c C·ªïng",
        icon: "üõ°Ô∏è",
        color: "#10b981",
        abilities: ["Flag bonus: -2 virality if correct"],
        winCondition: "viral_below_threshold"
    },
    factchecker: { /* ... */ },
    clickbait: { /* ... */ }
};

// Include getRoleDistribution(numPlayers) function
// Include assignRoles() with shuffle logic
```

## JavaScript - Game Logic

### Prompt 9: Game State Machine
```javascript
// Create gameState object and state management:
let gameState = {
    screen: 'menu',
    round: 1,
    maxRounds: 6,
    viralMeter: 0,
    trustMeter: 5,
    viralThreshold: 15, // adjusted by difficulty
    players: [], // array of player objects with role, score
    currentPlayerIndex: 0,
    deck: [], // shuffled cards
    currentCards: [], // 4 cards in play
    usedCards: [],
    eventDeck: [],
    factCheckTokens: 3,
    actionLog: []
};

// Functions: initGame(), showScreen(), startGame(), startRound()
```

### Prompt 10: Action Handlers
```javascript
// Implement 3 action handlers:
function executeAction(player, card, action) {
    switch(action) {
        case 'share': 
            // Add card.virality to viralMeter
            // Clickbait bonus if card.credibility < 50
        case 'flag':
            // Set card.flagged = true
            // If correct (credibility < 50): -2 virality, +1 trust
            // If incorrect: -1 trust
        case 'check':
            // Set card.checked = true, consume 1 token
            // Reveal credibility, -2 virality if debunked
    }
    addActionLog(message);
    updateUI();
}
```

### Prompt 11: AI Logic
```javascript
// Simple AI decision-making for 3 role types:
function aiTurn() {
    const aiPlayer = gameState.players[currentIndex];
    
    if (aiPlayer.role === 'clickbait') {
        // Strategy: Share low credibility cards
        // 80% share false cards, 20% random
    } else if (aiPlayer.role === 'factchecker') {
        // Strategy: Check suspicious cards if tokens available
        // Otherwise flag unflagged cards
    } else { // moderator
        // Strategy: 70% flag, 30% share
        // Prioritize unflagged cards
    }
    
    executeAction(aiPlayer, chosenCard, chosenAction);
    nextTurn();
}
```

### Prompt 12: Round Flow
```javascript
// Complete round cycle:
function startRound() {
    drawEvent(); // Show event modal
    drawCards(4); // Pull from deck, display in feed
    currentPlayerIndex = 0;
    updateUI();
}

function endRound() {
    applyEventEffects(); // Modify cards/meters
    usedCards.push(...currentCards);
    currentCards = [];
    showRoundSummary(); // Modal with viral/trust scores
    round++;
    if (checkGameEnd()) endGame();
    else startRound();
}

function checkGameEnd() {
    return viralMeter >= threshold || round > maxRounds;
}
```

## JavaScript - UI Updates

### Prompt 13: Dynamic Rendering
```javascript
// Generate functions to update UI:
function renderCards() {
    // Create card HTML for each currentCard
    // Apply .selected, .flagged, .checked classes
    // Attach click listeners
}

function updateMeters() {
    // Calculate percentage: (viralMeter / threshold) * 100
    // Set .meter-fill width
    // Update text displays
}

function updateActionLog() {
    // Display last 20 log entries
    // Format: [Round] Message
    // Auto-scroll to top
}

function updatePlayScreen() {
    // Update round counter
    // Update current player indicator
    // Update players list with active state
    // Update action button disabled states
}
```

### Prompt 14: Modal Management
```javascript
// Event, action, and round summary modals:
function showEventModal() {
    // Populate event title, description, effect message
    // Display modal with .active class
}

function selectAction(action) {
    // Show action modal with card title
    // Display consequence description
    // Set confirm handler
}

function showRoundSummary() {
    // Display round number, viral score, trust score
    // Continue button to next round or end game
}
```

## JavaScript - Utilities

### Prompt 15: Helper Functions
```javascript
// Reusable utilities:
function shuffleArray(array) {
    // Fisher-Yates shuffle algorithm
}

function getCredibilityColor(credibility) {
    // 70+: green, 40-69: orange, <40: red
}

function addActionLog(message) {
    // Prepend log with round number, timestamp
    // Keep only last 20 entries
}

// Export/import for modular structure
```

### Prompt 16: Event Listeners Setup
```javascript
// Organize all event listeners:
function setupMenuListeners() {
    // Start button, how-to button
    // Player count buttons, difficulty buttons
    // Fact-checker toggle
}

function setupPlayListeners() {
    // Share, Flag, Check action buttons
    // Modal confirm/cancel buttons
    // Card click handlers
}

function setupResultsListeners() {
    // Play again button
}

// Call from initGame() on DOMContentLoaded
```

## Integration & Testing

### Prompt 17: Module Integration
```
Ensure proper script loading order in HTML:
1. cards.js (data)
2. events.js (data)
3. roles.js (config + functions)
4. main.js (game logic, uses above modules)

Handle exports for potential future Node.js use.
```

### Prompt 18: Browser Compatibility
```
Test and ensure compatibility:
- ES6 features (const, let, arrow functions, template literals)
- CSS Grid and Flexbox
- CSS variables (--role-color)
- Array methods (map, filter, reduce)
- Fallbacks not needed (modern browsers only for hackathon)
```
